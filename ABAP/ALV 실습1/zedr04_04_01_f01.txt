*&---------------------------------------------------------------------*
*&  Include           ZEDR04_04_01_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .
  CASE 'X'.
    WHEN p_STAN.
      PERFORM select_standard.
    WHEN p_CBO.
      PERFORM select_pbo.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_FCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0021   text
*      -->P_0022   text
*      -->P_0023   text
*      -->P_0024   text
*----------------------------------------------------------------------*
FORM set_fcat  USING   p_key p_field p_text p_ref_table.

  gs_fcat-key       = p_key.
  gs_fcat-fieldname = p_field.
  gs_fcat-coltext   = p_text.
  gs_fcat-ref_table = p_ref_table.

  APPEND gs_fcat TO gt_fcat.
  CLEAR  gs_fcat.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REFRESH_GRID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refresh_grid .
  gs_stable-row = 'X'.
  gs_stable-col = 'X'.

  CALL METHOD go_grid->refresh_table_display
    EXPORTING
      is_stable      = gs_stable
      i_soft_refresh = space.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SAVE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM save_data .
  CALL METHOD go_grid->check_changed_data.
  IF gt_data[] IS NOT INITIAL.
    MODIFY ztedu04_01 FROM TABLE gt_data.

    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MESSAGE s000 WITH 'Save Success'.
    ELSE.
      ROLLBACK WORK.
      MESSAGE s000 WITH 'Save fail' DISPLAY LIKE 'E'.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DELETE_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM delete_data .
  DATA : lt_del TYPE TABLE OF ztedu04_01 WITH HEADER LINE.

  CLEAR : lt_del, lt_del[], gs_row, gt_row.

  CALL METHOD go_grid->get_selected_rows
    IMPORTING
      et_index_rows = gt_row.

  IF gt_row IS INITIAL.
    MESSAGE s000 WITH 'Please Select row' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  LOOP AT gt_row INTO gs_row.
    READ TABLE gt_data INDEX gs_row-index.

    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING gt_data TO lt_del.

      APPEND lt_del.
      CLEAR  lt_del.
    ENDIF.
  ENDLOOP.

  IF lt_del[] IS NOT INITIAL.
    DELETE ztedu04_01 FROM TABLE lt_del.

    IF sy-subrc EQ 0.
      COMMIT WORK AND WAIT.
      MESSAGE s000 WITH 'Delete Succes'.
      PERFORM get_data.
    ELSE.
      ROLLBACK WORK.
      MESSAGE s000 WITH 'Delete fail' DISPLAY LIKE 'E'.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECT_STANDARD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_standard .
  CLEAR : gt_data, gt_data[].

  SELECT a~matnr b~werks c~maktx a~pstat a~mtart a~matkl d~name1 a~meins
    INTO CORRESPONDING FIELDS OF TABLE gt_data
    FROM mara AS a
   INNER JOIN marc AS b
      ON a~matnr = b~matnr
   INNER JOIN makt AS c
      ON a~matnr = c~matnr
     AND c~spras = 'EN'
   INNER JOIN t001w AS d
      ON b~werks = d~werks
   WHERE a~matnr IN s_matnr.

  IF sy-subrc NE 0.
    MESSAGE s000 WITH 'No Data Found' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECT_PBO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM select_pbo.
 CLEAR : gt_data, gt_data[].
  SELECT matnr werks maktx pstat mtart matkl name1 meins
    INTO CORRESPONDING FIELDS OF TABLE gt_data
    FROM ztedu04_02
   WHERE matnr IN s_matnr.

  IF sy-subrc NE 0.
    MESSAGE s000 WITH 'No Data Found' DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.
ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 750
